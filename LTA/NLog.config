<?xml version="1.0" encoding="utf-8" ?>
<nlog	xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!--
	 Copy this file to the executing projects root directory and mark it to copy with a build ("Copy if newer" in properties)
	 and change the value of the variable "ApplicationName" below.
 
	 App logs:
	 ==========
	 default path for logs is: %AppData%/LieberLieber/${ApplicationName}/logs/
	  
	 NUnit logs:
	 ============
	 The NLog config needs to be loaded explicitely in unit tests like this:
	 [TestFixtureSetUp]
	 public void FixtureSetUp()
	 {
		  //Initialize NLog for Unit Test
		  LogManager.Configuration = new XmlLoggingConfiguration("NLog.config");
		  LogManager.ReconfigExistingLoggers();
	 }
	-->

	<!-- Adjust this variable, it defines the location and name of the application log -->
	<variable name="ApplicationName" value="LemonTree.Automation" />

	<!-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING -->
	<!--                                                                 -->
	<!--            DO NOT MODIFY CONTENT BELOW THIS LINE                -->
	<!--		  (if you aren't 100% sure on what you're doing)         -->
	<!--                                                                 -->
	<!-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING -->

	<!-- replace newlines in messages and exceptions with ';' - neccessary because log entries must not consist of more than one line -->
	<variable name="replaced_message" value="${replace:searchFor=(\\r+\\n+)+:replaceWith=;:regex=true:inner=${message}}" />
	<variable name="replaced_exception" value="${replace:searchFor=(\\r+\\n+)+:replaceWith=;:regex=true:inner=${exception:format=ToString,StackTrace}}" />

	<variable name="standard_layout" value="${processid}|${date:format=yyyy-MM-dd HH\:mm\:ss\,fff}|${uppercase:${level}}|${logger}|${callsite:fileName=true:includeSourcePath=false}|${threadid}:${threadname}|${replaced_exception}|${trim-whitespace:trimWhiteSpace=true:inner=${replaced_message}}|" />

	<!-- This is for NLog so that it can discover the log wrapper -->
	<extensions>
		<add assembly="LemonTree.Backend.Implementation"/>
	</extensions>

	<targets>
		<target	xsi:type="File"
				name="PerformanceLog"
				fileName="${specialfolder:folder=ApplicationData}/LieberLieber/${ApplicationName}/logs/${ApplicationName}Perf.log"
				archiveFileName="${specialfolder:folder=ApplicationData}/LieberLieber/${ApplicationName}/logs/archive/${ApplicationName}Perf_{##}.log"
				archiveNumbering="Rolling"
				encoding="UTF-8"
				lineEnding="CRLF"
				archiveEvery="Day"
				concurrentWrites="true"
				keepFileOpen="false"
				maxArchiveFiles="10" >
			<layout xsi:type="CsvLayout" delimiter="Comma" withHeader="true" quoting="Nothing">
				<column name="Time" layout="${longdate}"/>
				<column name="MachineName" layout="${machinename}"/>
				<column name="Action,Duration [ms]" layout="${message}" />
				<column name="WorkingSet [B]" layout="${properprocessinfo:property=WorkingSet64}"/>
				<column name="PeakWorkingSet [B]" layout="${properprocessinfo:property=PeakWorkingSet64}"/>
			</layout>
		</target>

		<!-- write to file located in: %AppData%/LieberLieber/${ApplicationName}/logs/
								${ApplicationName}.log .. current log from this day
								archive/${ApplicationName}_[Nr].log .. older logs auto archived every day for 10 days. -->
		<target	xsi:type="File"
				name="FileLog"
				fileName="${specialfolder:folder=ApplicationData}/LieberLieber/${ApplicationName}/logs/${ApplicationName}.log"
				layout="${standard_layout}"
				archiveFileName="${specialfolder:folder=ApplicationData}/LieberLieber/${ApplicationName}/logs/archive/${ApplicationName}_{##}.log"
				archiveNumbering="Rolling"
				encoding="UTF-8"
				lineEnding="CRLF"
				archiveEvery="Day"
				concurrentWrites="true"
				openFileCacheTimeout="30"
				keepFileOpen="true"
				maxArchiveFiles="10" />

		<!-- write to file for current app session (doesn't work if app is installed and user has no permissions, mostly intended for development) -->
		<!--
		<target	xsi:type="File"
				name="FileLogBasedir"
				fileName="${basedir}/log.log"
				layout="${standard_layout}"
				deleteOldFileOnStartup="true" />
		-->
		<!-- write to VS/CMD Console (always works, nice for debugging) -->
		<!--<target	xsi:type="Console"
					name="ConsoleLog"
					layout="${standard_layout}" /> -->
	</targets>

	<rules>
		<!-- logging rules -->
		<!--<logger name="*" minlevel="Debug" writeTo="ConsoleLog" />-->
		<!--<logger name="*" minlevel="Debug" writeTo="FileLogBasedir" />-->

		<!-- This is OK! Debug will only be written if an error occurs, otherwise the log level is Info (or >Debug) for the FileLog target! -->
		<logger name="*" minlevel="Debug" writeTo="FileLog" >
			<filters defaultAction="Log">
				<when condition="equals('${logger}', 'SystemLogger')" action="LogFinal"/>
			</filters>
		</logger>
		<logger name="PerformanceLogger" minlevel="Trace" writeTo="PerformanceLog" />
	</rules>
</nlog>
