# Copyright (c) IncQuery Labs cPlc.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# The following secrets need to be defined: INCQUERY_USERNAME, INCQUERY_PASSWORD, INCQUERY_AUTOSAR_UML_INTEGRATION_LICENSE

name: Review with IncQuery AUTOSAR-UML Bridge
'on':
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - review_requested
env:
  ModelName: counting-logic
  ModelExtension: qeax
  ReviewSessionURL: 'https://nexus.lieberlieber.com/repository/lemontree-session'
  LemonTreePipelineToolsRemovePrerenderedDiagramsExecutable: https://nexus.lieberlieber.com/repository/lemontree-pipeline-tools/LemonTree.Pipeline.Tools.RemovePrerenderedDiagrams.exe
jobs:
  AutosarUml:
    defaults:
      run:
        shell: pwsh
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          lfs: true
          fetch-depth: 0
      - uses: LieberLieber/setup-LemonTree.Automation@v4
        id: GetLTA
        with:
          License: '${{secrets.LTALICENSE}}'
      - name: Run IncQuery AUTOSAR-UML Bridge
        uses: IncQueryLabs/incquery-suite-bridge-autosar-uml-action@v1
        with:
          arxml_folder_path: example-arxml
          ea_model_file_path: 'counting-logic.qeax'
          incquery_username: '${{ secrets.INCQUERY_USERNAME }}'
          incquery_password: '${{ secrets.INCQUERY_PASSWORD }}'
          license: '${{ secrets.INCQUERY_AUTOSAR_UML_INTEGRATION_LICENSE }}'
      - name: Push updated model
        run: |
          git config --local user.name "Automatic Model Update"
          git config --local user.email "username@users.noreply.github.com"
          git add counting-logic.qeax
          git commit -m "Automatic Model Update"
          git push
      - name: Get relevant commit IDs
        id: CommitIds
        run: |
          git fetch
          $baseId = git merge-base origin/$env:GITHUB_BASE_REF origin/$env:GITHUB_HEAD_REF
          echo "::set-output name=baseCommitId::$baseId"
          $sourceId = git show-ref --hash origin/$env:GITHUB_HEAD_REF
          echo "::set-output name=sourceCommitId::$sourceId"
          $targetId = git show-ref --hash origin/$env:GITHUB_BASE_REF
          echo "::set-output name=targetCommitId::$targetId"
          echo "target branch: $env:GITHUB_BASE_REF"
          echo "source branch: $env:GITHUB_HEAD_REF"
          echo "target commit: $targetId"
          echo "source commit: $sourceId"
          echo "base commit: $baseId"
      - name: Create sessionfile name
        id: session_file
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const repoName = context.payload.pull_request.base.repo.name
            const prNumber = context.payload.pull_request.number
            const baseSHA = '${{steps.CommitIds.outputs.targetCommitId}}'
            const headSHA = '${{steps.CommitIds.outputs.sourceCommitId}}'
            const filename = [repoName, 'PR', prNumber, baseSHA, headSHA].join('-') + '.ltsfs'
            console.log(`Filename will be: ${filename}`)
            return filename
      - name: Download base-commit file
        id: baseDownload
        run: |
          git fetch origin ${{steps.CommitIds.outputs.baseCommitId}}
          $contents = git cat-file blob ${{steps.CommitIds.outputs.baseCommitId}}:${{env.ModelName}}.${{env.ModelExtension}}
          echo $contents[1]
          if($contents -ne $null){
            echo "ps"
            $contents | Out-File -FilePath "${{env.ModelName}}_base.${{env.ModelExtension}}"
            echo "result=downloaded" >> $env:GITHUB_OUTPUT
          }
          else {
            echo "no"
            echo "result=notFound" >> $env:GITHUB_OUTPUT
          }
      - name: Post new model comment to PR
        if: steps.baseDownload.outputs.result == 'notFound'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Model not found on base commit or fork-off point`
            })
      - name: Download target file
        if: steps.baseDownload.outputs.result == 'downloaded'
        id: headDownload
        run: |
          git fetch origin $env:GITHUB_HEAD_REF
          $pointer = git cat-file blob ${{steps.CommitIds.outputs.targetCommitId}}":${{env.ModelName}}.${{env.ModelExtension}}"
          $pointer | Out-File -FilePath "${{env.ModelName}}_target.${{env.ModelExtension}}"
      - name: Create review session file
        id: checkSession
        run: |
          $Message = "${{ steps.mergeCheck.outputs.message }}"
          $sfsfilename ="${{ steps.session_file.outputs.result }}"
          $output = &'${{steps.GetLTA.outputs.LemonTreeAutomationExecutable}}' diff --theirs ${{env.ModelName}}_target.${{env.ModelExtension}} --mine ${{env.ModelName}}.${{env.ModelExtension}} --sfs ${{ steps.session_file.outputs.result }}
          echo $output
          ForEach ($line in $($output -split "`r`n"))
          {
              if ($line.EndsWith('Found 0 different elements.'))
              {
                echo "No differences we don't need to publish the session file."
              $Message = ":heavy_check_mark: **Model is identical!**"
                $sfsfilename =""; 
              }
          }
          echo "$Message"
          echo "SfsFileName=$sfsfilename" >> $env:GITHUB_OUTPUT
          echo "message=$Message" >> $env:GITHUB_OUTPUT
          exit 0
      - name: Upload
        if: steps.baseDownload.outputs.result == 'downloaded'
        run: |
          $sessionFileName = "${{ steps.checkSession.outputs.SfsFileName }}"
          if ([string]::IsNullOrEmpty($sessionFileName))
          {
            echo "Nothing to upload"
          }
          else
          {
            $targetUrl = "${{env.ReviewSessionURL}}/${{ steps.session_file.outputs.result }}"
            echo "Uploading $sessionFileName to Nexus: $targetUrl"
            while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
            curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T $sessionFileName $targetUrl
          }
      - name: Archive Session Files
        if: steps.baseDownload.outputs.result == 'downloaded'
        uses: actions/upload-artifact@v3
        with:
          name: Review Session File
          path: '${{ steps.session_file.outputs.result }}'
          retention-days: 5
      - name: Create PR comment
        if: steps.baseDownload.outputs.result == 'downloaded'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.checkSession.outputs.message }}`
            })
